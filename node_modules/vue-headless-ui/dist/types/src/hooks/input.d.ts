import { PropType, Ref, SetupContext, WritableComputedRef } from "vue";
export declare type InputProps = Readonly<{
    modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
    options: Record<string, unknown>[] | null;
    id: string | number | null;
    name: string | number | null;
    rules: string | ((val: string | number | boolean | unknown[] | Record<string, unknown> | null) => boolean | string) | null | Record<string, any>;
    group: boolean;
    overrideState: InputState | null;
}>;
export declare enum InputState {
    Clear = "clear",
    Valid = "valid",
    Error = "error"
}
export interface FieldMeta<T> {
    touched: boolean;
    dirty: boolean;
    valid: boolean;
    validated: boolean;
    pending: boolean;
    initialValue?: T;
}
export interface ValidationResult {
    errors: Array<string>;
    valid: boolean;
}
export interface FieldData {
    errorMessage: Ref<string | undefined>;
    value: Ref<unknown> | WritableComputedRef<unknown>;
    meta: FieldMeta<unknown>;
    validate: () => Promise<ValidationResult>;
}
/**
 * The minimal props required by an input type component
 */
export declare const props: {
    modelValue: {
        type: PropType<string | number | boolean | Record<string, unknown> | unknown[] | null>;
        default: null;
    };
    options: {
        type: PropType<Record<string, unknown>[]>;
        default: null;
    };
    id: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    name: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    rules: {
        type: PropType<string | Record<string, any> | ((val: unknown) => boolean | string) | null>;
        default: null;
    };
    group: {
        type: BooleanConstructor;
        default: boolean;
    };
    overrideState: {
        type: PropType<InputState>;
        default: null;
    };
};
/**
 * The minimal emits required by an input component
 */
export declare const emits: {
    blur: null;
    "update:modelValue": (value: string | number | boolean | unknown[] | undefined) => boolean;
};
/**
 * A more complex version of the useField provided by vee-validate.
 * This takes care of a few extra things like auto id and name generation.
 */
export declare function useFieldContext(props: InputProps, context: SetupContext<any>): {
    errorMessage: Ref<string | undefined>;
    inputValue: WritableComputedRef<string | number | boolean | Record<string, unknown> | unknown[] | null>;
    inputName: string;
    inputId: string;
    meta: FieldMeta<unknown>;
    state: import("vue").ComputedRef<InputState>;
    validate: () => Promise<ValidationResult>;
    handleBlur: () => Promise<void>;
};
/**
 * Simple model wrapper for the vue v-model directive.
 */
export declare function useModel<T>(props: {
    modelValue: T;
} & Record<string, any>, context: SetupContext<any>): WritableComputedRef<T>;
