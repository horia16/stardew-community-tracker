declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: null;
    };
    options: {
        type: import("vue").PropType<Record<string, unknown>[]>;
        default: null;
    };
    id: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    name: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    rules: {
        type: import("vue").PropType<string | ((val: unknown) => string | boolean) | Record<string, any> | null>;
        default: null;
    };
    group: {
        type: BooleanConstructor;
        default: boolean;
    };
    overrideState: {
        type: import("vue").PropType<import("../../../hooks/input").InputState>;
        default: null;
    };
}, {
    errorMessage: import("vue").Ref<string | undefined>;
    state: import("vue").ComputedRef<import("../../../hooks/input").InputState>;
    validate: () => Promise<import("../../../hooks/input").ValidationResult>;
    handleBlur: () => Promise<void>;
    meta: import("../../../hooks/input").FieldMeta<unknown>;
    inputs: import("vue").Ref<string[]>;
    thing: string[];
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    blur: null;
    "update:modelValue": (value: string | number | boolean | unknown[] | undefined) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    options?: unknown;
    id?: unknown;
    name?: unknown;
    rules?: unknown;
    group?: unknown;
    overrideState?: unknown;
} & {
    name: string | number;
    modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
    options: Record<string, unknown>[];
    id: string | number;
    rules: string | ((val: unknown) => string | boolean) | Record<string, any> | null;
    group: boolean;
    overrideState: import("../../../hooks/input").InputState;
} & {}> & {
    onBlur?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string | number | boolean | unknown[] | undefined) => any) | undefined;
}, {
    name: string | number;
    modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
    options: Record<string, unknown>[];
    id: string | number;
    rules: string | ((val: unknown) => string | boolean) | Record<string, any> | null;
    group: boolean;
    overrideState: import("../../../hooks/input").InputState;
}>;
export default _default;
