export declare function getMonthNames(locale?: string, length?: "short" | "numeric" | "2-digit" | "long" | "narrow" | undefined): string[];
export declare function getWeekdayNames(locale?: string, length?: "short" | "long" | "narrow" | undefined): string[];
export interface DayObject {
    number: number;
    date: Date;
    disabled: boolean;
    meta: Record<string, any>;
}
export interface CalendarModifiers {
    disablePastDates: boolean;
    disableFutureDates: boolean;
    disabledDates: Array<Date | string>;
    custom: Array<(dayObject: DayObject) => DayObject>;
}
export declare type DayMatrix = Array<Array<DayObject | undefined | null>>;
export interface DateObject {
    d: number | null;
    m: number;
    y: number;
}
export declare function compareDate(date: Date | string | null | undefined, now: Date | string | null | undefined, comparator: "future" | "past" | "equal"): boolean;
export declare function computeDay(dayObject: DayObject, modifiers?: CalendarModifiers | null): {
    number: number;
    date: Date;
    disabled: boolean;
    meta: Record<string, any>;
};
/**
 * Create a 2d array with the days form a specific month of the year.
 */
export declare function createDayMapping(month: number, year: number, modifiers?: CalendarModifiers | null): DayMatrix;
/**
 * Shift a matrix by one week day. Useful when we want out week to start with Monday instead of Sunday.
 * @param matrix
 */
export declare function shiftMatrix(matrix: DayMatrix): DayMatrix;
/**
 * Convert an ISO string or a Date object to a plain js object.
 * @param value
 */
export declare function convertToDateObject(value: string | Date | undefined | null): {
    d: number;
    m: number;
    y: number;
};
export declare function lastDayOfMonth(month: number, year: number): number;
export declare function convertToDate(value: DateObject, mode?: "date" | "string"): string | Date;
