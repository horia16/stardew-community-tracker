{
  "version": 3,
  "sources": ["browser-external:stream", "browser-external:string_decoder", "../sax/lib/sax.js", "../xml-js/lib/array-helper.js", "../xml-js/lib/options-helper.js", "../xml-js/lib/xml2js.js", "../xml-js/lib/xml2json.js", "../xml-js/lib/js2xml.js", "../xml-js/lib/json2xml.js", "../xml-js/lib/index.js", "dep:xml-js"],
  "sourcesContent": ["export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"stream\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", "export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"string_decoder\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", ";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n", "module.exports = {\r\n\r\n  isArray: function(value) {\r\n    if (Array.isArray) {\r\n      return Array.isArray(value);\r\n    }\r\n    // fallback for older browsers like  IE 8\r\n    return Object.prototype.toString.call( value ) === '[object Array]';\r\n  }\r\n\r\n};\r\n", "var isArray = require('./array-helper').isArray;\r\n\r\nmodule.exports = {\r\n\r\n  copyOptions: function (options) {\r\n    var key, copy = {};\r\n    for (key in options) {\r\n      if (options.hasOwnProperty(key)) {\r\n        copy[key] = options[key];\r\n      }\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  ensureFlagExists: function (item, options) {\r\n    if (!(item in options) || typeof options[item] !== 'boolean') {\r\n      options[item] = false;\r\n    }\r\n  },\r\n\r\n  ensureSpacesExists: function (options) {\r\n    if (!('spaces' in options) || (typeof options.spaces !== 'number' && typeof options.spaces !== 'string')) {\r\n      options.spaces = 0;\r\n    }\r\n  },\r\n\r\n  ensureAlwaysArrayExists: function (options) {\r\n    if (!('alwaysArray' in options) || (typeof options.alwaysArray !== 'boolean' && !isArray(options.alwaysArray))) {\r\n      options.alwaysArray = false;\r\n    }\r\n  },\r\n\r\n  ensureKeyExists: function (key, options) {\r\n    if (!(key + 'Key' in options) || typeof options[key + 'Key'] !== 'string') {\r\n      options[key + 'Key'] = options.compact ? '_' + key : key;\r\n    }\r\n  },\r\n\r\n  checkFnExists: function (key, options) {\r\n    return key + 'Fn' in options;\r\n  }\r\n\r\n};\r\n", "var sax = require('sax');\r\nvar expat /*= require('node-expat');*/ = { on: function () { }, parse: function () { } };\r\nvar helper = require('./options-helper');\r\nvar isArray = require('./array-helper').isArray;\r\n\r\nvar options;\r\nvar pureJsParser = true;\r\nvar currentElement;\r\n\r\nfunction validateOptions(userOptions) {\r\n  options = helper.copyOptions(userOptions);\r\n  helper.ensureFlagExists('ignoreDeclaration', options);\r\n  helper.ensureFlagExists('ignoreInstruction', options);\r\n  helper.ensureFlagExists('ignoreAttributes', options);\r\n  helper.ensureFlagExists('ignoreText', options);\r\n  helper.ensureFlagExists('ignoreComment', options);\r\n  helper.ensureFlagExists('ignoreCdata', options);\r\n  helper.ensureFlagExists('ignoreDoctype', options);\r\n  helper.ensureFlagExists('compact', options);\r\n  helper.ensureFlagExists('alwaysChildren', options);\r\n  helper.ensureFlagExists('addParent', options);\r\n  helper.ensureFlagExists('trim', options);\r\n  helper.ensureFlagExists('nativeType', options);\r\n  helper.ensureFlagExists('nativeTypeAttributes', options);\r\n  helper.ensureFlagExists('sanitize', options);\r\n  helper.ensureFlagExists('instructionHasAttributes', options);\r\n  helper.ensureFlagExists('captureSpacesBetweenElements', options);\r\n  helper.ensureAlwaysArrayExists(options);\r\n  helper.ensureKeyExists('declaration', options);\r\n  helper.ensureKeyExists('instruction', options);\r\n  helper.ensureKeyExists('attributes', options);\r\n  helper.ensureKeyExists('text', options);\r\n  helper.ensureKeyExists('comment', options);\r\n  helper.ensureKeyExists('cdata', options);\r\n  helper.ensureKeyExists('doctype', options);\r\n  helper.ensureKeyExists('type', options);\r\n  helper.ensureKeyExists('name', options);\r\n  helper.ensureKeyExists('elements', options);\r\n  helper.ensureKeyExists('parent', options);\r\n  helper.checkFnExists('doctype', options);\r\n  helper.checkFnExists('instruction', options);\r\n  helper.checkFnExists('cdata', options);\r\n  helper.checkFnExists('comment', options);\r\n  helper.checkFnExists('text', options);\r\n  helper.checkFnExists('instructionName', options);\r\n  helper.checkFnExists('elementName', options);\r\n  helper.checkFnExists('attributeName', options);\r\n  helper.checkFnExists('attributeValue', options);\r\n  helper.checkFnExists('attributes', options);\r\n  return options;\r\n}\r\n\r\nfunction nativeType(value) {\r\n  var nValue = Number(value);\r\n  if (!isNaN(nValue)) {\r\n    return nValue;\r\n  }\r\n  var bValue = value.toLowerCase();\r\n  if (bValue === 'true') {\r\n    return true;\r\n  } else if (bValue === 'false') {\r\n    return false;\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction addField(type, value) {\r\n  var key;\r\n  if (options.compact) {\r\n    if (\r\n      !currentElement[options[type + 'Key']] &&\r\n      (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(options[type + 'Key']) !== -1 : options.alwaysArray)\r\n    ) {\r\n      currentElement[options[type + 'Key']] = [];\r\n    }\r\n    if (currentElement[options[type + 'Key']] && !isArray(currentElement[options[type + 'Key']])) {\r\n      currentElement[options[type + 'Key']] = [currentElement[options[type + 'Key']]];\r\n    }\r\n    if (type + 'Fn' in options && typeof value === 'string') {\r\n      value = options[type + 'Fn'](value, currentElement);\r\n    }\r\n    if (type === 'instruction' && ('instructionFn' in options || 'instructionNameFn' in options)) {\r\n      for (key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          if ('instructionFn' in options) {\r\n            value[key] = options.instructionFn(value[key], key, currentElement);\r\n          } else {\r\n            var temp = value[key];\r\n            delete value[key];\r\n            value[options.instructionNameFn(key, temp, currentElement)] = temp;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (isArray(currentElement[options[type + 'Key']])) {\r\n      currentElement[options[type + 'Key']].push(value);\r\n    } else {\r\n      currentElement[options[type + 'Key']] = value;\r\n    }\r\n  } else {\r\n    if (!currentElement[options.elementsKey]) {\r\n      currentElement[options.elementsKey] = [];\r\n    }\r\n    var element = {};\r\n    element[options.typeKey] = type;\r\n    if (type === 'instruction') {\r\n      for (key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          break;\r\n        }\r\n      }\r\n      element[options.nameKey] = 'instructionNameFn' in options ? options.instructionNameFn(key, value, currentElement) : key;\r\n      if (options.instructionHasAttributes) {\r\n        element[options.attributesKey] = value[key][options.attributesKey];\r\n        if ('instructionFn' in options) {\r\n          element[options.attributesKey] = options.instructionFn(element[options.attributesKey], key, currentElement);\r\n        }\r\n      } else {\r\n        if ('instructionFn' in options) {\r\n          value[key] = options.instructionFn(value[key], key, currentElement);\r\n        }\r\n        element[options.instructionKey] = value[key];\r\n      }\r\n    } else {\r\n      if (type + 'Fn' in options) {\r\n        value = options[type + 'Fn'](value, currentElement);\r\n      }\r\n      element[options[type + 'Key']] = value;\r\n    }\r\n    if (options.addParent) {\r\n      element[options.parentKey] = currentElement;\r\n    }\r\n    currentElement[options.elementsKey].push(element);\r\n  }\r\n}\r\n\r\nfunction manipulateAttributes(attributes) {\r\n  if ('attributesFn' in options && attributes) {\r\n    attributes = options.attributesFn(attributes, currentElement);\r\n  }\r\n  if ((options.trim || 'attributeValueFn' in options || 'attributeNameFn' in options || options.nativeTypeAttributes) && attributes) {\r\n    var key;\r\n    for (key in attributes) {\r\n      if (attributes.hasOwnProperty(key)) {\r\n        if (options.trim) attributes[key] = attributes[key].trim();\r\n        if (options.nativeTypeAttributes) {\r\n          attributes[key] = nativeType(attributes[key]);\r\n        }\r\n        if ('attributeValueFn' in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement);\r\n        if ('attributeNameFn' in options) {\r\n          var temp = attributes[key];\r\n          delete attributes[key];\r\n          attributes[options.attributeNameFn(key, attributes[key], currentElement)] = temp;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return attributes;\r\n}\r\n\r\nfunction onInstruction(instruction) {\r\n  var attributes = {};\r\n  if (instruction.body && (instruction.name.toLowerCase() === 'xml' || options.instructionHasAttributes)) {\r\n    var attrsRegExp = /([\\w:-]+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\w+))\\s*/g;\r\n    var match;\r\n    while ((match = attrsRegExp.exec(instruction.body)) !== null) {\r\n      attributes[match[1]] = match[2] || match[3] || match[4];\r\n    }\r\n    attributes = manipulateAttributes(attributes);\r\n  }\r\n  if (instruction.name.toLowerCase() === 'xml') {\r\n    if (options.ignoreDeclaration) {\r\n      return;\r\n    }\r\n    currentElement[options.declarationKey] = {};\r\n    if (Object.keys(attributes).length) {\r\n      currentElement[options.declarationKey][options.attributesKey] = attributes;\r\n    }\r\n    if (options.addParent) {\r\n      currentElement[options.declarationKey][options.parentKey] = currentElement;\r\n    }\r\n  } else {\r\n    if (options.ignoreInstruction) {\r\n      return;\r\n    }\r\n    if (options.trim) {\r\n      instruction.body = instruction.body.trim();\r\n    }\r\n    var value = {};\r\n    if (options.instructionHasAttributes && Object.keys(attributes).length) {\r\n      value[instruction.name] = {};\r\n      value[instruction.name][options.attributesKey] = attributes;\r\n    } else {\r\n      value[instruction.name] = instruction.body;\r\n    }\r\n    addField('instruction', value);\r\n  }\r\n}\r\n\r\nfunction onStartElement(name, attributes) {\r\n  var element;\r\n  if (typeof name === 'object') {\r\n    attributes = name.attributes;\r\n    name = name.name;\r\n  }\r\n  attributes = manipulateAttributes(attributes);\r\n  if ('elementNameFn' in options) {\r\n    name = options.elementNameFn(name, currentElement);\r\n  }\r\n  if (options.compact) {\r\n    element = {};\r\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\r\n      element[options.attributesKey] = {};\r\n      var key;\r\n      for (key in attributes) {\r\n        if (attributes.hasOwnProperty(key)) {\r\n          element[options.attributesKey][key] = attributes[key];\r\n        }\r\n      }\r\n    }\r\n    if (\r\n      !(name in currentElement) &&\r\n      (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)\r\n    ) {\r\n      currentElement[name] = [];\r\n    }\r\n    if (currentElement[name] && !isArray(currentElement[name])) {\r\n      currentElement[name] = [currentElement[name]];\r\n    }\r\n    if (isArray(currentElement[name])) {\r\n      currentElement[name].push(element);\r\n    } else {\r\n      currentElement[name] = element;\r\n    }\r\n  } else {\r\n    if (!currentElement[options.elementsKey]) {\r\n      currentElement[options.elementsKey] = [];\r\n    }\r\n    element = {};\r\n    element[options.typeKey] = 'element';\r\n    element[options.nameKey] = name;\r\n    if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\r\n      element[options.attributesKey] = attributes;\r\n    }\r\n    if (options.alwaysChildren) {\r\n      element[options.elementsKey] = [];\r\n    }\r\n    currentElement[options.elementsKey].push(element);\r\n  }\r\n  element[options.parentKey] = currentElement; // will be deleted in onEndElement() if !options.addParent\r\n  currentElement = element;\r\n}\r\n\r\nfunction onText(text) {\r\n  if (options.ignoreText) {\r\n    return;\r\n  }\r\n  if (!text.trim() && !options.captureSpacesBetweenElements) {\r\n    return;\r\n  }\r\n  if (options.trim) {\r\n    text = text.trim();\r\n  }\r\n  if (options.nativeType) {\r\n    text = nativeType(text);\r\n  }\r\n  if (options.sanitize) {\r\n    text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n  addField('text', text);\r\n}\r\n\r\nfunction onComment(comment) {\r\n  if (options.ignoreComment) {\r\n    return;\r\n  }\r\n  if (options.trim) {\r\n    comment = comment.trim();\r\n  }\r\n  addField('comment', comment);\r\n}\r\n\r\nfunction onEndElement(name) {\r\n  var parentElement = currentElement[options.parentKey];\r\n  if (!options.addParent) {\r\n    delete currentElement[options.parentKey];\r\n  }\r\n  currentElement = parentElement;\r\n}\r\n\r\nfunction onCdata(cdata) {\r\n  if (options.ignoreCdata) {\r\n    return;\r\n  }\r\n  if (options.trim) {\r\n    cdata = cdata.trim();\r\n  }\r\n  addField('cdata', cdata);\r\n}\r\n\r\nfunction onDoctype(doctype) {\r\n  if (options.ignoreDoctype) {\r\n    return;\r\n  }\r\n  doctype = doctype.replace(/^ /, '');\r\n  if (options.trim) {\r\n    doctype = doctype.trim();\r\n  }\r\n  addField('doctype', doctype);\r\n}\r\n\r\nfunction onError(error) {\r\n  error.note = error; //console.error(error);\r\n}\r\n\r\nmodule.exports = function (xml, userOptions) {\r\n\r\n  var parser = pureJsParser ? sax.parser(true, {}) : parser = new expat.Parser('UTF-8');\r\n  var result = {};\r\n  currentElement = result;\r\n\r\n  options = validateOptions(userOptions);\r\n\r\n  if (pureJsParser) {\r\n    parser.opt = {strictEntities: true};\r\n    parser.onopentag = onStartElement;\r\n    parser.ontext = onText;\r\n    parser.oncomment = onComment;\r\n    parser.onclosetag = onEndElement;\r\n    parser.onerror = onError;\r\n    parser.oncdata = onCdata;\r\n    parser.ondoctype = onDoctype;\r\n    parser.onprocessinginstruction = onInstruction;\r\n  } else {\r\n    parser.on('startElement', onStartElement);\r\n    parser.on('text', onText);\r\n    parser.on('comment', onComment);\r\n    parser.on('endElement', onEndElement);\r\n    parser.on('error', onError);\r\n    //parser.on('startCdata', onStartCdata);\r\n    //parser.on('endCdata', onEndCdata);\r\n    //parser.on('entityDecl', onEntityDecl);\r\n  }\r\n\r\n  if (pureJsParser) {\r\n    parser.write(xml).close();\r\n  } else {\r\n    if (!parser.parse(xml)) {\r\n      throw new Error('XML parsing error: ' + parser.getError());\r\n    }\r\n  }\r\n\r\n  if (result[options.elementsKey]) {\r\n    var temp = result[options.elementsKey];\r\n    delete result[options.elementsKey];\r\n    result[options.elementsKey] = temp;\r\n    delete result.text;\r\n  }\r\n\r\n  return result;\r\n\r\n};\r\n", "var helper = require('./options-helper');\r\nvar xml2js = require('./xml2js');\r\n\r\nfunction validateOptions (userOptions) {\r\n  var options = helper.copyOptions(userOptions);\r\n  helper.ensureSpacesExists(options);\r\n  return options;\r\n}\r\n\r\nmodule.exports = function(xml, userOptions) {\r\n  var options, js, json, parentKey;\r\n  options = validateOptions(userOptions);\r\n  js = xml2js(xml, options);\r\n  parentKey = 'compact' in options && options.compact ? '_parent' : 'parent';\r\n  // parentKey = ptions.compact ? '_parent' : 'parent'; // consider this\r\n  if ('addParent' in options && options.addParent) {\r\n    json = JSON.stringify(js, function (k, v) { return k === parentKey? '_' : v; }, options.spaces);\r\n  } else {\r\n    json = JSON.stringify(js, null, options.spaces);\r\n  }\r\n  return json.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\r\n};\r\n", "var helper = require('./options-helper');\nvar isArray = require('./array-helper').isArray;\n\nvar currentElement, currentElementName;\n\nfunction validateOptions(userOptions) {\n  var options = helper.copyOptions(userOptions);\n  helper.ensureFlagExists('ignoreDeclaration', options);\n  helper.ensureFlagExists('ignoreInstruction', options);\n  helper.ensureFlagExists('ignoreAttributes', options);\n  helper.ensureFlagExists('ignoreText', options);\n  helper.ensureFlagExists('ignoreComment', options);\n  helper.ensureFlagExists('ignoreCdata', options);\n  helper.ensureFlagExists('ignoreDoctype', options);\n  helper.ensureFlagExists('compact', options);\n  helper.ensureFlagExists('indentText', options);\n  helper.ensureFlagExists('indentCdata', options);\n  helper.ensureFlagExists('indentAttributes', options);\n  helper.ensureFlagExists('indentInstruction', options);\n  helper.ensureFlagExists('fullTagEmptyElement', options);\n  helper.ensureFlagExists('noQuotesForNativeAttributes', options);\n  helper.ensureSpacesExists(options);\n  if (typeof options.spaces === 'number') {\n    options.spaces = Array(options.spaces + 1).join(' ');\n  }\n  helper.ensureKeyExists('declaration', options);\n  helper.ensureKeyExists('instruction', options);\n  helper.ensureKeyExists('attributes', options);\n  helper.ensureKeyExists('text', options);\n  helper.ensureKeyExists('comment', options);\n  helper.ensureKeyExists('cdata', options);\n  helper.ensureKeyExists('doctype', options);\n  helper.ensureKeyExists('type', options);\n  helper.ensureKeyExists('name', options);\n  helper.ensureKeyExists('elements', options);\n  helper.checkFnExists('doctype', options);\n  helper.checkFnExists('instruction', options);\n  helper.checkFnExists('cdata', options);\n  helper.checkFnExists('comment', options);\n  helper.checkFnExists('text', options);\n  helper.checkFnExists('instructionName', options);\n  helper.checkFnExists('elementName', options);\n  helper.checkFnExists('attributeName', options);\n  helper.checkFnExists('attributeValue', options);\n  helper.checkFnExists('attributes', options);\n  helper.checkFnExists('fullTagEmptyElement', options);\n  return options;\n}\n\nfunction writeIndentation(options, depth, firstLine) {\n  return (!firstLine && options.spaces ? '\\n' : '') + Array(depth + 1).join(options.spaces);\n}\n\nfunction writeAttributes(attributes, options, depth) {\n  if (options.ignoreAttributes) {\n    return '';\n  }\n  if ('attributesFn' in options) {\n    attributes = options.attributesFn(attributes, currentElementName, currentElement);\n  }\n  var key, attr, attrName, quote, result = [];\n  for (key in attributes) {\n    if (attributes.hasOwnProperty(key) && attributes[key] !== null && attributes[key] !== undefined) {\n      quote = options.noQuotesForNativeAttributes && typeof attributes[key] !== 'string' ? '' : '\"';\n      attr = '' + attributes[key]; // ensure number and boolean are converted to String\n      attr = attr.replace(/\"/g, '&quot;');\n      attrName = 'attributeNameFn' in options ? options.attributeNameFn(key, attr, currentElementName, currentElement) : key;\n      result.push((options.spaces && options.indentAttributes? writeIndentation(options, depth+1, false) : ' '));\n      result.push(attrName + '=' + quote + ('attributeValueFn' in options ? options.attributeValueFn(attr, key, currentElementName, currentElement) : attr) + quote);\n    }\n  }\n  if (attributes && Object.keys(attributes).length && options.spaces && options.indentAttributes) {\n    result.push(writeIndentation(options, depth, false));\n  }\n  return result.join('');\n}\n\nfunction writeDeclaration(declaration, options, depth) {\n  currentElement = declaration;\n  currentElementName = 'xml';\n  return options.ignoreDeclaration ? '' :  '<?' + 'xml' + writeAttributes(declaration[options.attributesKey], options, depth) + '?>';\n}\n\nfunction writeInstruction(instruction, options, depth) {\n  if (options.ignoreInstruction) {\n    return '';\n  }\n  var key;\n  for (key in instruction) {\n    if (instruction.hasOwnProperty(key)) {\n      break;\n    }\n  }\n  var instructionName = 'instructionNameFn' in options ? options.instructionNameFn(key, instruction[key], currentElementName, currentElement) : key;\n  if (typeof instruction[key] === 'object') {\n    currentElement = instruction;\n    currentElementName = instructionName;\n    return '<?' + instructionName + writeAttributes(instruction[key][options.attributesKey], options, depth) + '?>';\n  } else {\n    var instructionValue = instruction[key] ? instruction[key] : '';\n    if ('instructionFn' in options) instructionValue = options.instructionFn(instructionValue, key, currentElementName, currentElement);\n    return '<?' + instructionName + (instructionValue ? ' ' + instructionValue : '') + '?>';\n  }\n}\n\nfunction writeComment(comment, options) {\n  return options.ignoreComment ? '' : '<!--' + ('commentFn' in options ? options.commentFn(comment, currentElementName, currentElement) : comment) + '-->';\n}\n\nfunction writeCdata(cdata, options) {\n  return options.ignoreCdata ? '' : '<![CDATA[' + ('cdataFn' in options ? options.cdataFn(cdata, currentElementName, currentElement) : cdata.replace(']]>', ']]]]><![CDATA[>')) + ']]>';\n}\n\nfunction writeDoctype(doctype, options) {\n  return options.ignoreDoctype ? '' : '<!DOCTYPE ' + ('doctypeFn' in options ? options.doctypeFn(doctype, currentElementName, currentElement) : doctype) + '>';\n}\n\nfunction writeText(text, options) {\n  if (options.ignoreText) return '';\n  text = '' + text; // ensure Number and Boolean are converted to String\n  text = text.replace(/&amp;/g, '&'); // desanitize to avoid double sanitization\n  text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return 'textFn' in options ? options.textFn(text, currentElementName, currentElement) : text;\n}\n\nfunction hasContent(element, options) {\n  var i;\n  if (element.elements && element.elements.length) {\n    for (i = 0; i < element.elements.length; ++i) {\n      switch (element.elements[i][options.typeKey]) {\n      case 'text':\n        if (options.indentText) {\n          return true;\n        }\n        break; // skip to next key\n      case 'cdata':\n        if (options.indentCdata) {\n          return true;\n        }\n        break; // skip to next key\n      case 'instruction':\n        if (options.indentInstruction) {\n          return true;\n        }\n        break; // skip to next key\n      case 'doctype':\n      case 'comment':\n      case 'element':\n        return true;\n      default:\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction writeElement(element, options, depth) {\n  currentElement = element;\n  currentElementName = element.name;\n  var xml = [], elementName = 'elementNameFn' in options ? options.elementNameFn(element.name, element) : element.name;\n  xml.push('<' + elementName);\n  if (element[options.attributesKey]) {\n    xml.push(writeAttributes(element[options.attributesKey], options, depth));\n  }\n  var withClosingTag = element[options.elementsKey] && element[options.elementsKey].length || element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve';\n  if (!withClosingTag) {\n    if ('fullTagEmptyElementFn' in options) {\n      withClosingTag = options.fullTagEmptyElementFn(element.name, element);\n    } else {\n      withClosingTag = options.fullTagEmptyElement;\n    }\n  }\n  if (withClosingTag) {\n    xml.push('>');\n    if (element[options.elementsKey] && element[options.elementsKey].length) {\n      xml.push(writeElements(element[options.elementsKey], options, depth + 1));\n      currentElement = element;\n      currentElementName = element.name;\n    }\n    xml.push(options.spaces && hasContent(element, options) ? '\\n' + Array(depth + 1).join(options.spaces) : '');\n    xml.push('</' + elementName + '>');\n  } else {\n    xml.push('/>');\n  }\n  return xml.join('');\n}\n\nfunction writeElements(elements, options, depth, firstLine) {\n  return elements.reduce(function (xml, element) {\n    var indent = writeIndentation(options, depth, firstLine && !xml);\n    switch (element.type) {\n    case 'element': return xml + indent + writeElement(element, options, depth);\n    case 'comment': return xml + indent + writeComment(element[options.commentKey], options);\n    case 'doctype': return xml + indent + writeDoctype(element[options.doctypeKey], options);\n    case 'cdata': return xml + (options.indentCdata ? indent : '') + writeCdata(element[options.cdataKey], options);\n    case 'text': return xml + (options.indentText ? indent : '') + writeText(element[options.textKey], options);\n    case 'instruction':\n      var instruction = {};\n      instruction[element[options.nameKey]] = element[options.attributesKey] ? element : element[options.instructionKey];\n      return xml + (options.indentInstruction ? indent : '') + writeInstruction(instruction, options, depth);\n    }\n  }, '');\n}\n\nfunction hasContentCompact(element, options, anyContent) {\n  var key;\n  for (key in element) {\n    if (element.hasOwnProperty(key)) {\n      switch (key) {\n      case options.parentKey:\n      case options.attributesKey:\n        break; // skip to next key\n      case options.textKey:\n        if (options.indentText || anyContent) {\n          return true;\n        }\n        break; // skip to next key\n      case options.cdataKey:\n        if (options.indentCdata || anyContent) {\n          return true;\n        }\n        break; // skip to next key\n      case options.instructionKey:\n        if (options.indentInstruction || anyContent) {\n          return true;\n        }\n        break; // skip to next key\n      case options.doctypeKey:\n      case options.commentKey:\n        return true;\n      default:\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction writeElementCompact(element, name, options, depth, indent) {\n  currentElement = element;\n  currentElementName = name;\n  var elementName = 'elementNameFn' in options ? options.elementNameFn(name, element) : name;\n  if (typeof element === 'undefined' || element === null || element === '') {\n    return 'fullTagEmptyElementFn' in options && options.fullTagEmptyElementFn(name, element) || options.fullTagEmptyElement ? '<' + elementName + '></' + elementName + '>' : '<' + elementName + '/>';\n  }\n  var xml = [];\n  if (name) {\n    xml.push('<' + elementName);\n    if (typeof element !== 'object') {\n      xml.push('>' + writeText(element,options) + '</' + elementName + '>');\n      return xml.join('');\n    }\n    if (element[options.attributesKey]) {\n      xml.push(writeAttributes(element[options.attributesKey], options, depth));\n    }\n    var withClosingTag = hasContentCompact(element, options, true) || element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve';\n    if (!withClosingTag) {\n      if ('fullTagEmptyElementFn' in options) {\n        withClosingTag = options.fullTagEmptyElementFn(name, element);\n      } else {\n        withClosingTag = options.fullTagEmptyElement;\n      }\n    }\n    if (withClosingTag) {\n      xml.push('>');\n    } else {\n      xml.push('/>');\n      return xml.join('');\n    }\n  }\n  xml.push(writeElementsCompact(element, options, depth + 1, false));\n  currentElement = element;\n  currentElementName = name;\n  if (name) {\n    xml.push((indent ? writeIndentation(options, depth, false) : '') + '</' + elementName + '>');\n  }\n  return xml.join('');\n}\n\nfunction writeElementsCompact(element, options, depth, firstLine) {\n  var i, key, nodes, xml = [];\n  for (key in element) {\n    if (element.hasOwnProperty(key)) {\n      nodes = isArray(element[key]) ? element[key] : [element[key]];\n      for (i = 0; i < nodes.length; ++i) {\n        switch (key) {\n        case options.declarationKey: xml.push(writeDeclaration(nodes[i], options, depth)); break;\n        case options.instructionKey: xml.push((options.indentInstruction ? writeIndentation(options, depth, firstLine) : '') + writeInstruction(nodes[i], options, depth)); break;\n        case options.attributesKey: case options.parentKey: break; // skip\n        case options.textKey: xml.push((options.indentText ? writeIndentation(options, depth, firstLine) : '') + writeText(nodes[i], options)); break;\n        case options.cdataKey: xml.push((options.indentCdata ? writeIndentation(options, depth, firstLine) : '') + writeCdata(nodes[i], options)); break;\n        case options.doctypeKey: xml.push(writeIndentation(options, depth, firstLine) + writeDoctype(nodes[i], options)); break;\n        case options.commentKey: xml.push(writeIndentation(options, depth, firstLine) + writeComment(nodes[i], options)); break;\n        default: xml.push(writeIndentation(options, depth, firstLine) + writeElementCompact(nodes[i], key, options, depth, hasContentCompact(nodes[i], options)));\n        }\n        firstLine = firstLine && !xml.length;\n      }\n    }\n  }\n  return xml.join('');\n}\n\nmodule.exports = function (js, options) {\n  options = validateOptions(options);\n  var xml = [];\n  currentElement = js;\n  currentElementName = '_root_';\n  if (options.compact) {\n    xml.push(writeElementsCompact(js, options, 0, true));\n  } else {\n    if (js[options.declarationKey]) {\n      xml.push(writeDeclaration(js[options.declarationKey], options, 0));\n    }\n    if (js[options.elementsKey] && js[options.elementsKey].length) {\n      xml.push(writeElements(js[options.elementsKey], options, 0, !xml.length));\n    }\n  }\n  return xml.join('');\n};\n", "var js2xml = require('./js2xml.js');\r\n\r\nmodule.exports = function (json, options) {\r\n  if (json instanceof Buffer) {\r\n    json = json.toString();\r\n  }\r\n  var js = null;\r\n  if (typeof (json) === 'string') {\r\n    try {\r\n      js = JSON.parse(json);\r\n    } catch (e) {\r\n      throw new Error('The JSON structure is invalid');\r\n    }\r\n  } else {\r\n    js = json;\r\n  }\r\n  return js2xml(js, options);\r\n};\r\n", "/*jslint node:true */\r\n\r\nvar xml2js = require('./xml2js');\r\nvar xml2json = require('./xml2json');\r\nvar js2xml = require('./js2xml');\r\nvar json2xml = require('./json2xml');\r\n\r\nmodule.exports = {\r\n  xml2js: xml2js,\r\n  xml2json: xml2json,\r\n  js2xml: js2xml,\r\n  json2xml: json2xml\r\n};\r\n", "export default require(\"./node_modules/xml-js/lib/index.js\");"],
  "mappings": "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",
  "names": []
}
